#! /usr/bin/env python3
######################################################################
# Copyright (C) 2017 Cobaro
######################################################################

import sys

from twisted.internet import reactor
from twisted.python import log
from twisted.web.server import Site
from twisted.web.static import File

from autobahn.twisted.websocket import WebSocketServerFactory, \
     WebSocketServerProtocol, listenWS

from twebo import *


class TweboServerProtocol(WebSocketServerProtocol):

    def onOpen(self):
        self.factory.register(self)

    def onMessage(self, payload, is_binary):
        if not is_binary:
            pass

        print(payload)
        return


    def connectionLost(self, reason):
        WebSocketServerProtocol.connectionLost(self, reason)
        self.factory.unregister(self)


class TweboServerFactory(WebSocketServerFactory):

    def __init__(self, url):
        WebSocketServerFactory.__init__(self, url)
        self.clients = []

        # Initialise heartbeat timer.
        reactor.callLater(1, self.heartbeat)
        return

    def register(self, client):
        if client not in self.clients:
            print("Registered client {}".format(client.peer))
            self.clients.append(client)

    def unregister(self, client):
        if client in self.clients:
            print("Unregistered client {}".format(client.peer))
            self.clients.remove(client)

    def heartbeat(self):
        """Broadcast heartbeat to all subscribers."""
        self.broadcast('{ "MessageType": "v1.heartbeat" }')
        reactor.callLater(1, self.heartbeat)
        return

    def broadcast(self, msg):
        for c in self.clients:
            c.sendMessage(msg.encode('utf8'))
            print("Message {} sent to {}".format(msg, c.peer))



def main():
    # Log to stdout (systemd, bah).
    log.startLogging(sys.stdout)

    # WebSockets server.
    factory = TweboServerFactory(u"ws://0.0.0.0:30030")
    factory.protocol = TweboServerProtocol
    listenWS(factory)

    # Web server.
    webdir = File("../web")
    website = Site(webdir)
    reactor.listenTCP(8080, website)

    reactor.run()
    return


if __name__ == "__main__":
    main()
